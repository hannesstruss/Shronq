apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.github.triplet.play'

android {
  compileSdkVersion buildConfig.compileSdk

  defaultConfig {
    applicationId = "de.hannesstruss.shronq"
    minSdkVersion buildConfig.minSdk
    targetSdkVersion buildConfig.targetSdk
    versionCode = buildConfig.version.code
    versionName = buildConfig.version.name

    resValue "string", "firebase_database_url", "\"${getProperty('shronq.firebase_database_url')}\""
    resValue "string", "google_api_key", "\"${getProperty('shronq.firebase_api_key')}\""
    resValue "string", "google_app_id", "\"${getProperty('shronq.firebase_application_id')}\""
    resValue "string", "google_storage_bucket", "\"${getProperty('shronq.firebase_storage_bucket')}\""
    resValue "string", "project_id", "\"${getProperty('shronq.firebase_project_id')}\""

    resValue "string", "bugsnag_key", getProperty('shronq.bugsnag_key')

    javaCompileOptions {
      annotationProcessorOptions {
        arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
      }
    }
  }

  signingConfigs {
    debug {
      storeFile file('debug.keystore')
      storePassword 'hunter2'
      keyAlias 'key0'
      keyPassword 'hunter2'
    }

    if (file('upload.keystore').exists()) {
      upload {
        storeFile file('upload.keystore')
        storePassword getProperty('shronq.upload_store_password')
        keyAlias 'key0'
        keyPassword getProperty('shronq.upload_key_password')
      }
    }
  }

  buildTypes {
    debug {
      applicationIdSuffix = ".dev"
      versionNameSuffix = "-dev"
      signingConfig signingConfigs.debug

      buildConfigField "String", "FIREBASE_COLLECTION_NAME", "\"weights_debug\""
    }

    release {
      if (file('upload.keystore').exists()) {
        signingConfig signingConfigs.upload
      } else {
        signingConfig signingConfigs.debug
      }

      buildConfigField "String", "FIREBASE_COLLECTION_NAME", "\"weights\""
    }
  }
}

play {
  jsonFile = file('play-publisher-service-account.json')
  track = 'internal'
}

dependencies {
  implementation deps.kotlin.stdlib

  implementation deps.dagger.runtime
  kapt deps.dagger.compiler

  implementation deps.android.support.appCompat
  implementation deps.android.support.constraintLayout

  implementation deps.android.arch.navigation.fragment
  implementation deps.android.arch.navigation.ui

  implementation deps.android.arch.lifecycle.extensions
  implementation deps.android.arch.lifecycle.viewmodel

  implementation deps.android.arch.room.runtime
  implementation deps.android.arch.room.rx2
  kapt deps.android.arch.room.compiler

  implementation deps.android.arch.work

  implementation deps.playservices.fit
  implementation deps.playservices.auth

  implementation deps.gson

  implementation deps.firebase.core
  implementation deps.firebase.firestore

  implementation deps.rx.java
  implementation deps.rx.android

  implementation deps.rx.binding.main

  implementation deps.timber
  implementation deps.bugsnag.sdk
}
